<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--由于 logback在 application.properties之前加载，所以无法读取 application.properties
		中的变量，此时需要使用 springProperty属性 -->
	<springProperty scope="context" name="APP_NAME" source="logging.app.name" defaultValue="gousade"/>
	<springProperty scope="context" name="LOG_PATH" source="logging.file.path" defaultValue="/logs"/>
	<!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
	<!--<property name="LOG_PATH" value="/logs" /> <property name="appName"
		value="gousade" /> -->
	<contextName>${APP_NAME}</contextName>
	<!-- 彩色日志 -->
	<!-- 配置格式变量：CONSOLE_LOG_PATTERN 彩色日志格式 -->
	<!-- magenta:洋红 -->
	<!-- boldMagenta:粗红 -->
	<!-- cyan:青色 -->
	<!-- white:白色 -->
	<!-- magenta:洋红 -->
	<property name="CONSOLE_LOG_PATTERN"
	          value="%yellow(%date{yyyy-MM-dd HH:mm:ss}) |%highlight(%-5level) |%blue(%thread) |%blue(%file:%line) |%green(%logger) |%cyan(%msg%n)"/>
	<property name="GOUSADE_LOG_PATTERN"
			  value="%boldRed(%d{yyyy-MM-dd HH:mm:ss}) %magenta(%contextName) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{99}) - %msg%n"/>
	<!--输出到控制台 ConsoleAppender -->
	<appender name="ConsoleInfoLog"
			  class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
		<encoder>
			<!-- <pattern>%d{yyyy-MM-dd HH:mm:ss} %contextName [%thread] %-5level
				%logger{36} - %msg%n</pattern> -->
			<pattern>${GOUSADE_LOG_PATTERN}</pattern>
			<!-- charset UTF-8注释掉之后以java -jar方式启动不会乱码 -->
			<!-- <charset>UTF-8</charset> -->
		</encoder>
		<!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中 -->
		<!-- <filter class="ch.qos.logback.classic.filter.ThresholdFilter"> <level>ERROR</level>
			</filter> -->
	</appender>

	<appender name="FileInfoLog"
	          class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则,如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${LOG_PATH}/${APP_NAME}-log-info.log</File>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{99} -
				%msg%n
			</pattern>
		</encoder>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy
				class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${LOG_PATH}/${APP_NAME}.log-info-%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!--单个日志文件最大值，达到之后就进行切割 -->
			<timeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>52MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--用来指定日志文件总体的最大值，到了这个值，就会删除旧的日志 -->
			<totalSizeCap>200GB</totalSizeCap>
			<!--只保留最近90天的日志 -->
			<maxHistory>1095</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FileWarnLog"
	          class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则,如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${LOG_PATH}/${APP_NAME}-log-warn.log</File>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{99} -
				%msg%n
			</pattern>
		</encoder>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy
				class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${LOG_PATH}/${APP_NAME}.log-warn-%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!--单个日志文件最大值，达到之后就进行切割 -->
			<timeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>52MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--用来指定日志文件总体的最大值，到了这个值，就会删除旧的日志 -->
			<totalSizeCap>200GB</totalSizeCap>
			<!--只保留最近90天的日志 -->
			<maxHistory>1095</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="FileErrorLog"
	          class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则,如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
			的日志改名为今天的日期。即，<File> 的日志都是当天的。 -->
		<File>${LOG_PATH}/${APP_NAME}-log-error.log</File>
		<!--日志输出编码格式化 -->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{99} -
				%msg%n
			</pattern>
		</encoder>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy -->
		<rollingPolicy
				class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->
			<FileNamePattern>${LOG_PATH}/${APP_NAME}.log-error-%d{yyyy-MM-dd}.%i.log
			</FileNamePattern>
			<!--单个日志文件最大值，达到之后就进行切割 -->
			<timeBasedFileNamingAndTriggeringPolicy
					class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>52MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--用来指定日志文件总体的最大值，到了这个值，就会删除旧的日志 -->
			<totalSizeCap>200GB</totalSizeCap>
			<!--只保留最近90天的日志 -->
			<maxHistory>1095</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录ERROR级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender> name:用来指定受此loger约束的某一个包或者具体的某一个类。
		<loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 level:用来设置打印级别，大小写无关。如果未设置此属性，那么当前loger将会继承上级的级别。
		addtivity:是否向上级loger传递打印信息。默认是true。 -->
	<!--<logger name="com.gousade.controller" level="DEBUG" additivity="false">
		<appender-ref ref="ConsoleInfoLog"/> <appender-ref ref="FileInfoLog"/> </logger> -->

	<!-- 使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
		第一种把<root level="INFO">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
		第二种就是单独给mapper下目录配置DEBUG模式，代码如下，这样配置sql语句会打印，其他还是正常DEBUG级别： -->
	<!--此处和application.properties中的logging.level.com.gousade.mapper=debug只需配置一个即可，作用相同，使得控制台和日志可以打印sql -->
	<!--<logger name="com.gousade.mapper" level="debug" additivity="false">
		<appender-ref ref="ConsoleInfoLog"/> <appender-ref ref="FileInfoLog"/> <appender-ref
		ref="FileWarnLog"/> <appender-ref ref="FileErrorLog"/> </logger> -->

	<springProfile name="default">
		<!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 <logger>仅有一个name属性，
			一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE,
			DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。 -->
		<!--可以输出项目中的debug日志，包括mybatis的sql日志 -->
		<logger name="com.gousade.mapper" level="debug"/>

		<!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE,
			DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素。 -->
		<root level="INFO">
			<appender-ref ref="ConsoleInfoLog"/>
			<appender-ref ref="FileInfoLog"/>
			<appender-ref ref="FileWarnLog"/>
			<appender-ref ref="FileErrorLog"/>
		</root>
	</springProfile>

	<!--开发环境 -->
	<springProfile name="dev">
		<!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。 <logger>仅有一个name属性，
			一个可选的level和一个可选的addtivity属性。 name:用来指定受此logger约束的某一个包或者具体的某一个类。 level:用来设置打印级别，大小写无关：TRACE,
			DEBUG, INFO, WARN, ERROR, ALL 和 OFF， 如果未设置此属性，那么当前logger将会继承上级的级别。 -->
		<!--可以输出项目中的debug日志，包括mybatis的sql日志 -->
		<logger name="com.gousade.mapper" level="debug"/>

		<!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性 level:用来设置打印级别，大小写无关：TRACE,
			DEBUG, INFO, WARN, ERROR, ALL 和 OFF，默认是DEBUG 可以包含零个或多个appender元素。 -->
		<root level="INFO">
			<appender-ref ref="ConsoleInfoLog"/>
			<appender-ref ref="FileInfoLog"/>
			<appender-ref ref="FileWarnLog"/>
			<appender-ref ref="FileErrorLog"/>
		</root>
	</springProfile>

	<!--生产环境 -->
	<springProfile name="prod">
		<root level="INFO">
			<appender-ref ref="ConsoleInfoLog"/>
			<appender-ref ref="FileInfoLog"/>
			<appender-ref ref="FileWarnLog"/>
			<appender-ref ref="FileErrorLog"/>
		</root>
	</springProfile>

</configuration>